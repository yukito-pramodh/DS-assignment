#include <stdio.h>
#include <stdbool.h>

bool is_safe(int board[], int row, int col, int n) {
    for(int i=0; i<row; i++) {
        if(board[i] == col)
            return false;
        if((row-i) == abs(board[i]-col))
            return false;
    }
    return true;
}

bool solve_n_queens_util(int board[], int col, int n) {
    if(col >= n)
        return true;

    for(int i=0; i<n; i++) {
        if(is_safe(board, i, col, n)) {
            board[i] = col;

            if(solve_n_queens_util(board, col+1, n))
                return true;

            board[i] = -1;
        }
    }
    return false;
}

void solve_n_queens(int n) {
    int board[n];
    for(int i=0; i<n; i++)
        board[i] = -1;

    if(!solve_n_queens_util(board, 0, n)) {
        printf("Solution does not exist");
        return;
    }

    print_board(board, n);
}

void print_board(int board[], int n) {
    for(int i=0; i<n; i++) {
        for(int j=0; j<n; j++) {
            if(board[i] == j)
                printf("Q ");
            else
                printf("_ ");
        }
        printf("\n");
    }
}

int main() {
    int n = 4;
    solve_n_queens(n);
    return 0;
}
